" Jezen Thomas’ .vimrc
"   jezenthomas@gmail.com
"   jezenthomas.com
"
" Thanks to:
"   - Steve Losh
"   - Gary Bernhardt
"   - Amir Salihefendic
"   - Vincent Driessen
"   - Benjamin Reitzammer

" Init & Vundle {{{
set nocompatible
filetype off
set rtp+=~/dotfiles/.vim/bundle/vundle/
call vundle#rc()

" Need this for Vundle to work
Bundle 'gmarik/vundle'
" Gary Bernhardt’s colour scheme
Bundle 'quanganhdo/grb256'
set t_Co=256
colorscheme grb256

Bundle 'bling/vim-airline'
Bundle 'git://git.wincent.com/command-t.git'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'kchmck/vim-coffee-script'
Bundle 'derekwyatt/vim-scala'
Bundle 'https://github.com/mileszs/ack.vim'
Bundle 'tpope/vim-markdown'
Bundle 'wavded/vim-stylus'
Plugin 'jiangmiao/auto-pairs'

filetype plugin indent on
" }}}

"Basic config " {{{
" This makes RVM work inside Vim.
set shell=bash
set lazyredraw
set autoread
set hidden
set viminfo=
set noesckeys
" }}}

" UI " {{{
set relativenumber                " Show relative line numbers
syntax on                         " Enable syntax highlighting
set ruler                         " Show current position in status bar
set cursorline                    " Highlight current line
set synmaxcol=800                 " Don’t highlight lines longer than 800 chars
set wrap                          " Soft-wrap long lines
set linebreak
set showbreak=↪                   " Prefix linebreaks with this fancy arrow
set scrolloff=5                   " Keep at least 5 lines above/below
set title                         " Change terminal title
set showmode                      " Always show current mode
set laststatus=2                  " Make sure airline isn’t hidden
let g:airline_powerline_fonts = 1 " Custom airline font
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
set shortmess=atI                 " Hide intro message
set showcmd                       " Show command as it’s being typed
set list                          " Show invisible characters
set noerrorbells                  " Disable bells
set wildmenu                      " Enhance command-line completion
" }}}

" Editing " {{{
set clipboard=unnamed             " Use the system clipboard
set et                            " Pressing TAB creates spaces instead
set tabstop=2
set shiftwidth=2
set backspace=indent,eol,start    " Allow backspace in insert mode
set lcs=tab:▸\ ,extends:❯,precedes:❮,nbsp:.,trail:·,eol:¬
set nobackup                      " Disable backups
set nowb                          " Disable write backups
set noswapfile                    " Disable swap files
set completeopt-=preview          " Disable scratch preview buffer
set ttyfast
set encoding=utf-8 nobomb         " Use UTF-8 without BOM
set nojoinspaces                  " Don’t double space after join
" }}}

" Convenience mappings " {{{
"---------------------------
" Better than `,` since `-` is useless anyway and we need `,` for reverse find
let mapleader="-"
" Clean trailing whitespace
nnoremap <leader>w mz:%s/\s\+$//<cr>:let @/=''<cr>`z
" Stop opening man pages
nnoremap K <nop>
" Fast saving
nmap <leader>s :w!<cr>
" Save as super user
noremap <leader>S :w !sudo tee % > /dev/null<CR>
" Fast quit
nmap <leader>q :q<cr>
" Jump to beginning of line
noremap H 0
" Jump to end of line
noremap L $
" Toggle paste mode
map <leader>pp :setlocal paste!<cr>
" Toggle alternate buffer
nnoremap <leader><leader> <c-^>
" Emoticons
iabbrev ldis ಠ_ಠ
iabbrev lsir ಠ_ರೃ
iabbrev lhap ツ
iabbrev fliptable （╯°□°）╯ ┻━┻
" Quickly get to system clipboard
map <leader>y "*y
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <leader>v :vsplit<cr>
nnoremap <leader>h :split<cr>
nnoremap <c--> <c-w>-
nnoremap <c-+> <-w>+
" Rename current file, thanks to Gary Bernhardt
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>
" Reload active Chrome tab. Needs chrome-cli. Get it with Homebrew.
nnoremap <leader>l :w\|:silent !chrome-cli reload<cr>
" }}}

" Searching " {{{
set showmatch                     " Show matching bracket when under cursor
set hlsearch                      " Highlight search results
set ignorecase                    " Ignore case when searching
set smartcase                     " Case-sensitive if pattern includes uppercase
set incsearch                     " Highlight dynamically while typing

" Clear the higlighted search results
nnoremap <cr> :nohlsearch<cr>
" Ack results in quickfix window
nnoremap <leader>A :Ack
" Keep search matches in middle of window
nnoremap n nzzzv
nnoremap N Nzzzv

" Ignore stuff from Command-T
set wildignore+=.hg,.git,.svn                                     " version control
set wildignore+=bower_components,_bower_components,node_modules   " frontend packages
set wildignore+=*.jpg,*.png,*.gif                                 " binary images
set wildignore+=play-2.*,app/protobuf,target/*,ghostdriver        " play framework
set wildignore+=context,app-pub,project,shared-kernel,sub
set wildignore+=venv                                              " python
set wildignore+=*.eot,*.svg,*.ttf,*.woff                          " fonts
set wildignore+=dist                                              " generated distribution packages
set wildignore+=tmp
set wildignore+=*.lock,*.db
set wildignore+=activator*
set wildignore+=app/assets/javascripts/lib/*
set wildignore+=*.pdf
set wildignore+=report
" }}}

" Folding " {{{
set foldmethod=marker " Use three curly braces
" Toggle folds with Space
nnoremap <Space> za
vnoremap <Space> za
" }}}

" Automatic commands " {{{
if has("autocmd")
  " Enable file type detection
  filetype on
  " Treat .json files as .js
  autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
endif

" Make sure Vim returns to the same line when reopening a file
augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" Don't syntax highlight markdown because it's often wrong
autocmd! FileType mkd setlocal syn=off
" }}}

" Ruby on Rails "{{{
" Fast-way to run rspec from vim, thanks to Gary Bernhardt
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
nnoremap <leader>a :call RunTests('')<cr>
function! RunTests(filename)
  " Write the file and run tests for the given filename
  if expand("%") != ""
    :w
  end
  if match(a:filename, '\.feature$') != -1
    exec ":!script/features " . a:filename
  else
    " First choice: project-specific test script
    if filereadable("script/test")
      exec ":!script/test " . a:filename
    " Fall back to the .test-commands pipe if available, assuming someone
    " is reading the other side and running the commands
    elseif filewritable(".test-commands")
      let cmd = 'rspec --color --format progress --require "~/lib/vim_rspec_formatter" --format VimFormatter --out tmp/quickfix'
      exec ":!echo " . cmd . " " . a:filename . " > .test-commands"

      " Write an empty string to block until the command completes
      sleep 100m " milliseconds
      :!echo > .test-commands
      redraw!
    " Fall back to a blocking test run with Bundler
    elseif filereadable("Gemfile")
      exec ":!bundle exec rspec --color " . a:filename
    " Fall back to a normal blocking test run
    else
      exec ":!rspec --color " . a:filename
    end
  end
endfunction
" Corresponds with G. Bernhardt’s Cucumber wrapper
nnoremap <leader>c :w\|:!script/features<cr>
"}}}

